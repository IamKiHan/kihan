---------- 引入外部类 ----------
NGUITools = luanet.import_type("NGUITools")
KHUtilForLua = luanet.import_type("KH.KHUtilForLua")
KHUtil = luanet.import_type("KH.KHUtil")
KHAudioManager = luanet.import_type("KH.KHAudioManager")
GroupInviteParam = luanet.import_type("KH.GroupInviteParam")
KHPluginManager = luanet.import_type("KH.KHPluginManager")
GroupModel = luanet.import_type("KH.GroupModel")
UIAPI = luanet.import_type("KH.UIAPI")
UICommonRewardView = luanet.import_type("KH.UICommonRewardView")
KHResource = luanet.import_type("KH.KHResource")
RemoteModel = luanet.import_type("KH.RemoteModel")
KHEvent = luanet.import_type("KH.KHEvent")
KHGlobal = luanet.import_type("KH.KHGlobal")
NetworkManager = luanet.import_type("KH.NetworkManager")
ZoneActGetAllInfoReq = luanet.import_type("naruto.protocol.ZoneActGetAllInfoReq")
ZoneCmd = luanet.import_type("naruto.protocol.ZoneCmd")
Convert = luanet.import_type("System.Convert")
KHGlobalExt = luanet.import_type("KH.KHGlobalExt")
ItemMsgCS = luanet.import_type("naruto.protocol.ItemMsg")
KHLibrary = luanet.import_type("KH.Lua.Library.KHLibrary")
UIInvokeLater = luanet.import_type("UIInvokeLater")

---------- 声明一个类 ----------
if (kihan == nil) then
	kihan = {}
end

if (kihan.SchoolPlugin == nil) then
	kihan.SchoolPlugin = {}
end

if (kihan.SchoolPlugin.ClassroomMainView == nil) then
	kihan.SchoolPlugin.ClassroomMainView = {}
end
---------- 结束：声明一个类 ----------



---------- 声明属性 ----------
kihan.SchoolPlugin.ClassroomMainView.MyName = "ClassroomMainView"
---------- 结束：声明属性 ----------



---------- MonoBehaviour 约定函数 ----------
function kihan.SchoolPlugin.ClassroomMainView:Start()
	Log("ClassroomMainView:Start")
end

function kihan.SchoolPlugin.ClassroomMainView:OnEnable()
	Log("ClassroomMainView:OnEnable")
end

function kihan.SchoolPlugin.ClassroomMainView:OnDisable()
	Log("ClassroomMainView:OnDisable")
end

function kihan.SchoolPlugin.ClassroomMainView:OnDestory()
	Log("ClassroomMainView:OnDestory")
end

--function kihan.SchoolPlugin.ClassroomMainView:Update()
	--Log("ClassroomMainView:Update")
--end

--function kihan.SchoolPlugin.ClassroomMainView:FixedUpdate()
	-- Log("ClassroomMainView:FixedUpdate")
--end

--function kihan.SchoolPlugin.ClassroomMainView:LateUpdate()
	-- Log("ClassroomMainView:LateUpdate")
--end

--function kihan.SchoolPlugin.ClassroomMainView:OnClick()
--	Log("ClassroomMainView:OnClick")
--end

--function kihan.SchoolPlugin.ClassroomMainView:OnPress()
--	Log("ClassroomMainView:OnPress")
--end
---------- 结束：MonoBehaviour 约定函数 ----------



---------- UIWindow 的约定函数 ----------
function kihan.SchoolPlugin.ClassroomMainView:OnInitData(data)
	Log("ClassroomMainView:OnInitData"..data.roomName)
	
	-- 设置循环列表的回调
	local updateItemCallback = KHUtilForLua.UIWrapContentExUpdateMaker(self, self.OnUpdateItemCallback)
	local wrapContainer = self.WrapContainer:GetComponent("UIWrapContentEx")
	wrapContainer.onUpdateItem = updateItemCallback
	wrapContainer.TotalSize = 100
end

function kihan.SchoolPlugin.ClassroomMainView:OnInitWindow()
	Log("ClassroomMainView:OnInitWindow")
end

function kihan.SchoolPlugin.ClassroomMainView:OnOpenWindow()
	Log("ClassroomMainView:OnOpenWindow")
end

function kihan.SchoolPlugin.ClassroomMainView:OnPlayOpenWindowAniComplete()
	Log("ClassroomMainView:OnPlayOpenWindowAniComplete")
end

function kihan.SchoolPlugin.ClassroomMainView:OnBeginPlayCloseAnim()
	Log("ClassroomMainView:OnBeginPlayCloseAnim")
end

function kihan.SchoolPlugin.ClassroomMainView:OnCloseWindow()
	Log("ClassroomMainView:OnCloseWindow")
	
	-- 清理工作
	self:OnClickButtonRemoveEvent() -- 移除事件监听器
	UnRegisterCallback(ZONE_CLIENT_LUA_PB_TEST) -- 移除proto协议命令字
	self:OnClickButtonUnloadTexture() -- 卸载立绘
	
	if self.propItem ~= nil then
		NGUITools.Destroy(self.propItem) -- 销毁那个动态创建的道具
		self.propItem = nil
	end
	
	if self.EnterFrameCallbackRef ~= nil then
		KHGlobalExt.uiDispatcher:removeEventListener(KHEvent.ENTER_FRAME, self.EnterFrameCallbackRef);
		self.EnterFrameCallbackRef = nil;
		self.EnterFrameLabel:GetComponent("UILabel").text = "EnterFrame";
	end
end

function kihan.SchoolPlugin.ClassroomMainView:OnPlayCloseWindowAniComplete()
	Log("ClassroomMainView:OnPlayCloseWindowAniComplete")
end

function kihan.SchoolPlugin.ClassroomMainView:OnDestroyWindow()
	Log("ClassroomMainView:OnDestroyWindow")
end
---------- 结束：UIWindow 的约定函数 ----------



---------- 自定义函数 ----------
function kihan.SchoolPlugin.ClassroomMainView:OnClose()
	KHAudioManager.LuaPlaySound(9903)
	self.gameObject:GetComponent("UIWindow"):PlayCloseWindowAni(false)
end

-- 测试：事件监听
kihan.SchoolPlugin.ClassroomMainView.EventType = "LuaEventTest"
kihan.SchoolPlugin.ClassroomMainView.EventListenerCallbackRef = nil
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonAddEvent() -- 添加事件监听器
	if self.EventListenerCallbackRef == nil then
		self.EventListenerCallbackRef = KHUtilForLua.EventListenerMaker(self, self.OnEventListener)
		KHGlobal.dispatcher:addEventListener(self.EventType, self.EventListenerCallbackRef)
		UIAPI.ShowMsgTip("成功添加")
	end
end
function kihan.SchoolPlugin.ClassroomMainView:OnEventListener(event)
	local msg = "接收到事件了，event.data = "..event.data
	UIAPI.ShowMsgOK(msg)
end
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonDispatchEvent() -- 派发事件
	local event = KHEvent(self.EventType)
	event.data = "我是事件的数据"
	KHGlobal.dispatcher:dispatchEvent(event);
end
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonRemoveEvent() -- 移除事件监听器
	if self.EventListenerCallbackRef ~= nil then
		KHGlobal.dispatcher:removeEventListener(self.EventType, self.EventListenerCallbackRef)
		self.EventListenerCallbackRef = nil
		UIAPI.ShowMsgTip("成功移除")
	end
end

-- 测试：循环列表
function kihan.SchoolPlugin.ClassroomMainView:OnClickCreateList()
	local wrapContainer = self.WrapContainer:GetComponent("UIWrapContentEx")
	wrapContainer:AdjustTotalSizeWithoutInit(4);
	wrapContainer:UpdateContents();
end
function kihan.SchoolPlugin.ClassroomMainView:OnUpdateItemCallback(transform ,index)
	if transform ~= nil then
		local item = transform.gameObject:GetComponent("LuaBehaviour")
		local itemData = "第"..index.."项"
		item:CallLuaFunctionForLua("RefreshData", itemData)
	end
end

-- 测试： KHUtilForLua.ShowMsgOK()
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonShowMsgOK()
	KHUtilForLua.ShowMsgOK("测试接口：KHUtilForLua.ShowMsgOK()")
end

-- 测试： KHUtilForLua.Alert()
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonAlert()
	KHUtilForLua.Alert("Alert", "测试接口：KHUtilForLua.Alert()", "点我呀", self.OnAlertCallback, self)
end
function kihan.SchoolPlugin.ClassroomMainView:OnAlertCallback()
	UIAPI.ShowMsgTip("这是Alert回调：Alert已关闭");
end

-- 测试： KHUtilForLua.MsgBox()
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonMsgBox()
	KHUtilForLua.MsgBox("测试接口：KHUtilForLua.MsgBox()", "确定", "取消", self.OnMsgBoxOK, self.OnMsgBoxCancel, self)
end
function kihan.SchoolPlugin.ClassroomMainView:OnMsgBoxOK()
	UIAPI.ShowMsgTip("这是MsgBox回调：确定");
end
function kihan.SchoolPlugin.ClassroomMainView:OnMsgBoxCancel()
	UIAPI.ShowMsgTip("这是MsgBox回调：取消");
end

-- 测试：显示奖励
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonShowReward()
	--KHUtilForLua.ShowChestRewardForLua("将要获得奖励", "20009:44;25002:22;25001:65")
	
	local reward_list = {}
	
	local item1 = {}
	item1.id = 20009
	item1.count = 44
	--item1.final_id = 0
	--item1.final_count = 0
	--item1.award_type = 0
	
	local item2 = {}
	item2.id = 25002
	item2.count = 33
	item2.final_id = 0
	item2.final_count = 0
	item2.award_type = 0
	
	table.insert(reward_list, item1)
	table.insert(reward_list, item2)
	
	KHUtilForLua.ShowRewardsForLua(reward_list, KHUtilForLua.KHVoidFunctionMaker(self, self.VoidTest))
end
function kihan.SchoolPlugin.ClassroomMainView:VoidTest()
	
end

-- 测试：获取奖励
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonShowOnlyItems()
	local reward_list = {}
	table.insert(reward_list, 20009)
	table.insert(reward_list, 44)
	
	table.insert(reward_list, 25002)
	table.insert(reward_list, 22)
	
	table.insert(reward_list, 25001)
	table.insert(reward_list, 32)
	UICommonRewardView.ShowOnlyItemsForLua(reward_list)
end

-- 测试：加载立绘
kihan.SchoolPlugin.ClassroomMainView.LoadPortraitURL = "Common/Portrait/90121_Portrait"
kihan.SchoolPlugin.ClassroomMainView.LoadPortraitCallbackRef = nil -- 加载回调函数的引用
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonLoadTexture()
	if self.LoadPortraitCallbackRef == nil then
        self.LoadPortraitCallbackRef = KHUtilForLua.LuaCallbackMaker(self.OnLoadPortraitCallback, self);    
	end
    KHResource.LoadRes(self.LoadPortraitURL, self.LoadPortraitCallbackRef);	
end
function kihan.SchoolPlugin.ClassroomMainView:OnLoadPortraitCallback(url, obj, result, extra)
	-- self.PortraitTexture 是prefab里引用的UITexture对象
    if self.PortraitTexture == nil or NGUITools.GetActive(self.PortraitTexture) == false then
        return
    end
    self.PortraitTexture:GetComponent("UITexture").mainTexture = obj;
end
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonUnloadTexture()
	if self.LoadPortraitCallbackRef ~= nil then
        self.PortraitTexture:GetComponent("UITexture").mainTexture = nil
        KHResource.unLoadRes(self.LoadPortraitURL, self.LoadPortraitCallbackRef)
        self.LoadPortraitCallbackRef = nil
    end
end

-- 测试：发送 Lua 协议
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonSendProto()
	local arg1 = ClientLuaPBTestMsg()
	arg1.id = 1
	arg1.msg1.str = "arg1"
	table.insert(arg1.msg1.array_uint32, 1)
	table.insert(arg1.msg1.array_uint32, 11)
	table.insert(arg1.msg1.array_uint32, 111)
	table.insert(arg1.msg1.str_array, "a")
	table.insert(arg1.msg1.str_array, "aa")
	table.insert(arg1.msg1.str_array, "aaa")
	
	local arg2 = ClientLuaPBTestMsg()
	arg2.id = 2
	arg2.msg1.str = "arg2"
	table.insert(arg2.msg1.array_uint32, 2)
	table.insert(arg2.msg1.array_uint32, 22)
	table.insert(arg2.msg1.array_uint32, 222)
	table.insert(arg2.msg1.str_array, "b")
	table.insert(arg2.msg1.str_array, "bb")
	table.insert(arg2.msg1.str_array, "bbb")
	
	local request = ClientLuaPBTestReq()
	table.insert(request.msg, arg1)
	table.insert(request.msg, arg2)
	request.award_notify.qqvip_addpro = 44
	request.award_notify.guest_addpro = 55
	request.award_notify.act_addpro = 66
	
	local itemMsg = ItemMsg()
	itemMsg.id = 9044
	itemMsg.count = 88
	table.insert(request.award_notify.award_list, itemMsg)
	
	local ninjaToSliceMsg = NinjaToSliceMsg()
	ninjaToSliceMsg.ninja_id = 900011100
	ninjaToSliceMsg.ninja_slice_id = 8989898
	table.insert(request.award_notify.ninja_slice, ninjaToSliceMsg)
	
	local pb_data = request:SerializeToString()
	RegisterCmdType(ZONE_CLIENT_LUA_PB_TEST, nil, nil)
	NetSendUnicast(ZONE_CLIENT_LUA_PB_TEST, pb_data, self.OnSendCallback, self, true, 10, -1);
end
function kihan.SchoolPlugin.ClassroomMainView:OnSendCallback(cmd,buff,timeout)
	local response = ClientLuaPBTestResp()
	response:ParseFromString(buff)
	KHUtilForLua.ShowMsgOK("已收到协议："..response.msg[2].msg1.str_array[3])
	
	Log("<<<<<<<<<<<<<<<<<< response.award_notify:")
	Log(response.award_notify.qqvip_addpro)
	Log(response.award_notify.guest_addpro)
	Log(response.award_notify.act_addpro)
	
	Log(response.award_notify.award_list[1].id)
	Log(response.award_notify.award_list[1].count)
	Log(response.award_notify.ninja_slice[1].ninja_id)
	Log(response.award_notify.ninja_slice[1].ninja_slice_id)
end

-- 测试：发送 C# 协议
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonSendCSProto()
	local request = ZoneActGetAllInfoReq()
	NetworkManager.Instance:SendUnicast(Convert.ToUInt32(ZoneCmd.ZONE_ACT_GET_ALL_INFO), request, KHUtilForLua.NetworkCallbackMaker(self, self.OnSendCSCallback), false, KHUtilForLua.TimeoutCallbackMaker(self, self.OnSendCSTimeout) , 10.0, -1)
end
function kihan.SchoolPlugin.ClassroomMainView:OnSendCSCallback(message)
	if message.ret_info.ret_code == 0 then
		UIAPI.ShowMsgOK("发送了查询活动的协议，已收到回包，一共有 "..message.actinfos.Count.." 个活动");
	end
end
function kihan.SchoolPlugin.ClassroomMainView:OnSendCSTimeout()
	UIAPI.ShowMsgOK("发送超时");
end

-- 测试：动态创建道具
kihan.SchoolPlugin.ClassroomMainView.propItem = nil
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonCreatePropItem()
	if self.propItem == nil then
		local propBagItemPrefab = KHResource.LoadResource("UI/PropBagItem"); -- 注意，这里能同步加载，是因为在SchoolPlugin的GetPreloadResources()方法里添加了预加载
		self.propItem = NGUITools.AddChild(self.PropItemContainer, propBagItemPrefab)
		local item = self.propItem:GetComponent("UIPackageCellItem")
		item:SetItem(20009, 44)
		item.showSimpleTipOnclick = true
	end
end

-- 测试：向所有 Operation 发消息
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonSendMessageToAllOperation()
	KHUtilForLua.SendMessageForLuaSystem("SchoolPlugin", "Hello", nil) --第三个参数这里传了nil，你也可以传个object
end

-- 测试：调用某个 Operation 的方法
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonCallFunctionOperation()
	local plugin = KHPluginManager.Instance:GetPluginByName("SchoolPlugin");
	plugin:CallLuaFunctionToOperation("kihan.SchoolPlugin.TeacherOperation", "GoodBye", nil)
end

-- 测试：调用某个 Extension 的方法
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonCallFunctionExtension()
	local plugin = KHPluginManager.Instance:GetPluginByName("SchoolPlugin");
	plugin:CallLuaFunctionToExtension("kihan.SchoolPlugin.RoomExtension", "HelloExtension", nil)
end

-- 测试：设置动态字体
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonRestoreLabelFont()
	UIAPI.ShowMsgOK("腾讯云");
end

-- 测试：访问 Lua 这边的 Model 数据
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonModel()
	UIAPI.ShowMsgOK("Lua的Model数据，用了一个Extension来实现，请查看SchoolModel.txt。\n随便输出："..kihan.SchoolPlugin.SchoolModel.ClassRoomInfos["Grade2"]);
end

-- 测试：EnterFrame
kihan.SchoolPlugin.ClassroomMainView.TotalFrame = 0;
kihan.SchoolPlugin.ClassroomMainView.EnterFrameCallbackRef = nil;
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonEnterFrame()
	if self.EnterFrameCallbackRef == nil then
		self.EnterFrameCallbackRef = KHUtilForLua.EventListenerMaker(self, self.OnEnterFrame)
		KHGlobalExt.uiDispatcher:addEventListener(KHEvent.ENTER_FRAME, self.EnterFrameCallbackRef);
	end
end
function kihan.SchoolPlugin.ClassroomMainView:OnEnterFrame()
	self.TotalFrame = self.TotalFrame + 1;
	self.EnterFrameLabel:GetComponent("UILabel").text = "Frame: "..self.TotalFrame;
end

-- 测试：ShowRewards 奖励
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonShowRewards()
	local reward_list = {}
	
	local item1 = ItemMsgCS()
	item1.id = 20009
	item1.count = 44
	table.insert(reward_list, item1)
	
	local item2 = ItemMsgCS()
	item2.id = 25002
	item2.count = 22
	table.insert(reward_list, item2)
	
	KHUtilForLua.ShowRewards(reward_list, KHUtilForLua.KHVoidFunctionMaker(self, self.OnClickButtonShowRewardsCallback))
end
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonShowRewardsCallback()
	UIAPI.ShowMsgTip("关闭面板了");
end

-- 测试：延时执行
function kihan.SchoolPlugin.ClassroomMainView:OnClickButtonInvokeLater()
	print("-=-=-")
	--UIInvokeLater.Invoke(self.gameObject, 3, KHLibrary.KHFunc(self.OnInvokeLaterCallback, self))
end
function kihan.SchoolPlugin.ClassroomMainView:OnInvokeLaterCallback()
	UIAPI.ShowMsgTip("3秒后打开了这个面板");
end

---------- 结束：自定义函数 ----------